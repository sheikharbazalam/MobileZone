import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:razorpay_flutter/razorpay_flutter.dart';

/// RazorpayService
/// -----------------------------------------------------------
/// Handles all Razorpay payment gateway functionalities.
/// Built with GetX for scalability and easy dependency injection.
/// -----------------------------------------------------------
class RazorpayService extends GetxService {
  late Razorpay _razorpay;

  /// Reactive status variables (for UI binding if needed)
  final isPaymentProcessing = false.obs;
  final lastPaymentId = ''.obs;
  final lastError = ''.obs;

  /// Initialize Razorpay SDK and listeners
  @override
  void onInit() {
    super.onInit();

    _razorpay = Razorpay();

    // Payment success listener
    _razorpay.on(Razorpay.EVENT_PAYMENT_SUCCESS, _handlePaymentSuccess);

    // Payment error listener
    _razorpay.on(Razorpay.EVENT_PAYMENT_ERROR, _handlePaymentError);

    // External wallet selection listener
    _razorpay.on(Razorpay.EVENT_EXTERNAL_WALLET, _handleExternalWallet);
  }

  /// Start a payment with required details
  /// [amount] is in INR (converted internally to paise)
  /// [orderId] is generated by backend for signature verification
  /// [prefillEmail] and [prefillContact] are optional
  void startPayment({
    required double amount,
    required String orderId,
    String? prefillEmail,
    String? prefillContact,
    String currency = 'INR',
    String description = '',
    String keyId = '', // Pass from your backend
  }) {
    try {
      isPaymentProcessing.value = true;

      var options = {
        'key': keyId,
        'amount': (amount * 100).toInt(), // Convert to paise
        'currency': currency,
        'name': 'Your Company Name',
        'description': description,
        'order_id': orderId, // Generated by backend
        'prefill': {
          'contact': prefillContact ?? '',
          'email': prefillEmail ?? '',
        },
        'theme': {
          'color': '#3399cc',
        },
      };

      debugPrint("Opening Razorpay Checkout with options: $options");
      _razorpay.open(options);
    } catch (e) {
      isPaymentProcessing.value = false;
      lastError.value = "Error starting payment: $e";
      debugPrint(lastError.value);
    }
  }

  /// Success callback
  void _handlePaymentSuccess(PaymentSuccessResponse response) {
    isPaymentProcessing.value = false;
    lastPaymentId.value = response.paymentId ?? '';

    debugPrint("Payment Success: ${response.paymentId}");

    // TODO: Call backend to verify payment signature
    // Example: verifyPayment(response.paymentId, response.orderId, response.signature);

    Get.snackbar(
      "Payment Success",
      "Payment ID: ${response.paymentId}",
      snackPosition: SnackPosition.BOTTOM,
    );
  }

  /// Failure callback
  void _handlePaymentError(PaymentFailureResponse response) {
    isPaymentProcessing.value = false;
    lastError.value = "${response.code} - ${response.message}";

    debugPrint("Payment Failed: ${response.code} - ${response.message}");

    Get.snackbar(
      "Payment Failed",
      "${response.message}",
      snackPosition: SnackPosition.BOTTOM,
      backgroundColor: Colors.red.shade300,
      colorText: Colors.white,
    );
  }

  /// External wallet callback
  void _handleExternalWallet(ExternalWalletResponse response) {
    isPaymentProcessing.value = false;

    debugPrint("External Wallet Selected: ${response.walletName}");

    Get.snackbar(
      "External Wallet",
      "Wallet Name: ${response.walletName}",
      snackPosition: SnackPosition.BOTTOM,
    );
  }

  /// Dispose Razorpay instance when service is closed
  @override
  void onClose() {
    _razorpay.clear();
    super.onClose();
  }

  /// Example: Backend verification function
  /// You should implement an API call to your server here
  /// This ensures payment security (signature verification)
  Future<void> verifyPayment(String paymentId, String orderId, String signature) async {
    // TODO: Implement API call to backend for signature verification
    debugPrint("Verifying payment on backend...");
  }
}
